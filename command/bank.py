from aiogram.filters import Command
from aiogram import Router, types, Bot
import logging

from .datebase import *
from config import TOKEN

router = Router()
bot = Bot(token=TOKEN)

@router.message(Command(commands=["ballance", "bal"]))
async def bank(message: types.Message):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /balance")    
    logging.info(f"–î–µ–Ω–µ–≥ –Ω–∞ —Ä—É–∫–∞—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {get_balance(user_id)}")
    text = f"""
<b>üëõ–ù–∞ —Ä—É–∫–∞—Ö: {get_balance(user_id)}üí∏</b>\n
<b>üè¶–í –±–∞–Ω–∫–µ: {get_balance_on_bank(user_id)}üí∞</b>\n
<i>/dep all (–ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫)</i>
<i>/with all (—Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –±–∞–Ω–∫–∞)</i>
""" 
    await message.answer(text,parse_mode="HTML")
    logging.info(f"–î–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {get_balance_on_bank(user_id)}") 


async def get_username_by_id(bot: Bot, user_id: int):
    try:
        user = await bot.get_chat(user_id)
        return user.username or user.full_name
    except:
        return f"ID{user_id}"


@router.message(Command("pay"))
async def pay_command(message: types.Message):
    user_id = message.from_user.id
    if not message.reply_to_message:
        await message.answer("<b>‚ùå–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏</b>", parse_mode="HTML")
        return
    pay_user_id = message.reply_to_message.from_user.id
    balance_user_id = get_balance(user_id)
    balance_pay_user_id = get_balance(pay_user_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /pay –¥–ª—è {pay_user_id}")    
    logging.info(f"{balance_user_id} –Ω–∞ —Ä—É–∫–∞—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logging.info(f"{balance_pay_user_id} –Ω–∞ —Ä—É–∫–∞—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {pay_user_id} (–ø–µ—Ä–µ–≤–æ–¥ –µ–º—É): {pay_user_id}")
    if user_id == pay_user_id:
        await message.answer("<b>‚ùå–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!</b>")
        return
    if len(message.text.split()) < 2:
        await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ all –¥–ª—è —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞</b>", parse_mode="HTML")
        return
    paystr = message.text.split()[1].lower()
    if paystr == "all":
        pay = balance_user_id
    else:
        try:
            pay = int(paystr)
        except ValueError:
            await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ all</b>", parse_mode="HTML")
            return
    if balance_user_id < int(paystr):
        await message.answer("<b>‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>", parse_mode="HTML")
        return
    if int(paystr) <= 0:
        await message.answer("<b>‚ùå–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ –Ω—É–ª—è</b>", parse_mode="HTML")
        return
    else:
        pay = int(paystr)
        balance_pay_user_id += pay
        balance_user_id -= pay
        update_balance(user_id, balance_user_id)
        update_balance(pay_user_id, balance_pay_user_id)
        await message.answer(f"<b>‚úÖ–í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ {pay}üí∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: @{message.reply_to_message.from_user.username}</b>", parse_mode="HTML")


@router.message(Command("dep"))
async def dep_comand(message: types.Message):
    user_id = message.from_user.id
    balance = get_balance(user_id)
    balance_on_bank = get_balance_on_bank(user_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /dep ")    
    logging.info(f"–î–µ–Ω–µ–≥ –Ω–∞ —Ä—É–∫–∞—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {get_balance(user_id)}")
    if len(message.text.split()) < 2:
        await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ all</b>", parse_mode="HTML")
        return
    depstr = message.text.split()[1].lower()
    if depstr == "all":
        dep = balance
    else:
        try:
            dep = int(depstr)
        except ValueError:
            await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ all</b>", parse_mode="HTML")
            return
    if dep <= 0:
        await message.answer("<b>‚ùå–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ –Ω—É–ª—è</b>", parse_mode="HTML")
    if dep > balance:
        await message.answer("<b>‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>", parse_mode="HTML")
    if dep <= balance and dep > 0:
        balance_on_bank += dep
        balance -= dep
        update_balance(user_id, balance)
        update_balance_on_bank(user_id, balance_on_bank)
        await message.answer(f"""
‚úÖ<b>–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –Ω–∞ {dep}üí∏</b>
üè¶<b>–°—É–º–º–∞ –≤ –±–∞–Ω–∫–µ: {balance_on_bank}üí∞</b>""",
parse_mode="HTML")
        logging.info(f"–î–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {get_balance_on_bank(user_id)}")


@router.message(Command("with"))
async def with_comand(message: types.Message):
    user_id = message.from_user.id
    balance = get_balance(user_id)
    balance_on_bank = get_balance_on_bank(user_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /with ")    
    logging.info(f"–î–µ–Ω–µ–≥ –Ω–∞ —Ä—É–∫–∞—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {get_balance(user_id)}")
    if len(message.text.split()) < 2:
        await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ all</b>", parse_mode="HTML")
        return
    depstr = message.text.split()[1].lower()
    if depstr == "all":
        dep = balance_on_bank
    else:
        try:
            dep = int(depstr)
        except ValueError:
            await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ all</b>", parse_mode="HTML")
            return
    if dep <= 0:
        await message.answer("<b>‚ùå–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ –Ω—É–ª—è</b>", parse_mode="HTML")
    if dep > balance_on_bank:
        await message.answer("<b>‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ</b>", parse_mode="HTML")
    if dep <= balance_on_bank and dep > 0:
        balance += dep
        balance_on_bank -= dep
        update_balance(user_id, balance)
        update_balance_on_bank(user_id, balance_on_bank)
        await message.answer(f"""
‚úÖ<b>–í—ã –æ–±–Ω–∞–ª–∏—á–∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –Ω–∞ {dep}üí∞</b>
üëõ<b>–°—É–º–º–∞ –Ω–∞ —Ä—É–∫–∞—Ö: {balance}üí∏</b>""",
parse_mode="HTML")
        logging.info(f"–î–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {get_balance_on_bank(user_id)}")