from aiogram.filters import Command
from aiogram import Router, types
import logging

from .datebase import *

router = Router()

@router.message(Command("add"))
async def crime_command(message: types.Message):
    user_id = message.from_user.id
    admins = [5225848864]
    if user_id not in admins:
        await message.answer("<b>‚ùå–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ</b>", parse_mode="HTML")
        return
    else:
        if len(message.text.split()) < 2:
            return
        else:
            # if len(message.text.split('_')[1].split('@')[0]) < 2:
            #     for_pay = message.text.split('_')[1].split('@')[0]
            # else:
            add = message.text.split()[1]
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /add")
            balance = get_balance(user_id) 
            balance += int(add) 
            logging.info(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {balance}")
            update_balance(user_id, balance)

@router.message(Command("rob"))
async def rob_command(message: types.Message):
    robber_id = message.from_user.id
    robber_balance = get_balance(robber_id)
    if not message.reply_to_message:
        await message.answer("<b>‚ùå–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ–≥—Ä–∞–±–∏—Ç—å</b>", parse_mode="HTML")
        return
    victim_id = message.reply_to_message.from_user.id
    ROB_COOLDOWN = 21600  
    ROB_PERCENT = 0.7
    if not message.reply_to_message:
        await message.answer("<b>‚ùå–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ–≥—Ä–∞–±–∏—Ç—å</b>", parse_mode="HTML")
        return
    if robber_id == victim_id:
        await message.answer("<b>‚ùå–ù–µ–ª—å–∑—è –≥—Ä–∞–±–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!</b>")
        return
    last_rob_time = get_last_rob_time(robber_id)
    current_time = time.time()
    if current_time - last_rob_time < ROB_COOLDOWN:
        remaining = int(ROB_COOLDOWN - (current_time - last_rob_time))
        await message.answer(f"<b>‚è≥–í—ã —Å–º–æ–∂–µ—Ç–µ –≥—Ä–∞–±–∏—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {remaining//3600}—á {(remaining%3600)//60}–º</b>", parse_mode="HTML")
        return 
    victim_balance = get_balance(victim_id)
    if victim_balance <= 0:
        await message.answer(f"<b>‚ùå–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–ª—è –∫—Ä–∞–∂–∏</b>", parse_mode="HTML")
        return
    amount = int(victim_balance * ROB_PERCENT)
    update_balance(victim_id, victim_balance - amount)
    update_balance(robber_id, robber_balance + amount)
    update_last_rob_time(robber_id, current_time)
    await message.answer(
        f"<b>‚úÖ–í—ã —É–∫—Ä–∞–ª–∏ {amount}$ (70%) —É @{message.reply_to_message.from_user.username}\n"
        f"üí∏–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {robber_balance + amount}$\n"
        f"‚è≥–°–ª–µ–¥—É—é—â–µ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤</b>",
        parse_mode="HTML")
    

@router.message(Command("top"))
async def show_leaderboard(message: types.Message):
    try:
        cursor.execute("""
        SELECT 
            username,
            (balance + balance_on_bank) AS total_balance
        FROM users
        WHERE username IS NOT NULL
        ORDER BY total_balance DESC
        LIMIT 10
        """)
        
        top_users = cursor.fetchall()
        
        if not top_users:
            await message.answer("üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç!")
            return
        response = "<b>üèÜ –¢–û–ü-10 –ø–æ –±–∞–ª–∞–Ω—Å—É üèÜ</b>\n\n"
        for rank, (username, balance) in enumerate(top_users, 1):
            response += f"<b>{rank}. @{username} {balance}üí∞</b>\n" 
        
        await message.answer(response, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")