from aiogram.filters import Command
from aiogram import Router, types
import logging
import asyncio

from .datebase import *


router = Router()

def get_combo_text(dice_value: int) -> str:
    #       –±–∞—Ä(0)      –≤–∏–Ω–æ–≥—Ä–∞–¥(1)        –ª–∏–º–æ–Ω(2)       —Å–µ–º—å(3)
    values = ["0", "1", "2", "3"]

    dice_value -= 1
    result = []
    for _ in range(3):
        result.append(values[dice_value % 4])
        dice_value //= 4
    return " ".join(result)


@router.message(Command("slot"))
async def roll_dice(message: types.Message):
    user_id = message.from_user.id
    balance = get_balance(user_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /slot")
    logging.info(f"–î–µ–Ω—å–≥–∏ –Ω–∞ —Ä—É–∫–∞—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}  {balance}")
    if len(message.text.split()) < 2:
        await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ all</b>", parse_mode="HTML")
        return
    dicestr = message.text.split()[1].lower()
    win_combinations = {
    "0 0 0": 3,
    "1 1 1": 3,
    "2 2 2": 3,
    "3 3 3": 5,
    "3 3 0": 2,
    "3 3 1": 2,
    "3 3 2": 2,
    "0 3 3": 2,
    "1 3 3": 2,
    "2 3 3": 2,
    "3 0 3": 2,
    "3 1 3": 2,
    "3 2 3": 2,
}
    if dicestr == "all":
        dicee = balance
    else:
        try:
            dicee = int(dicestr)
        except ValueError:
            await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ all</b>", parse_mode="HTML")
            return
    if dicee <= 0:
        await message.answer("<b>‚ùå–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ –Ω—É–ª—è</b>", parse_mode="HTML")
    if dicee > balance:
        await message.answer("<b>‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>", parse_mode="HTML")
    if dicee <= balance and dicee > 0:
        data = await message.bot.send_dice(message.chat.id, emoji='üé∞')
        str_value = get_combo_text(data.dice.value)
        await asyncio.sleep(2,5)
        if str_value in win_combinations:
            multiplier = win_combinations[str_value]
            win_amount = dicee * multiplier
            balance += win_amount
            await message.answer(f"‚úÖ<b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏:</b> {win_amount}üí∏", parse_mode="HTML")
        else:
            await message.answer(f"‚ùå<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: {dicee}üí∏</b>", parse_mode="HTML")
            balance -= dicee
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–∏–≥—Ä–∞–ª {dicee}")
        update_balance(user_id, balance)


@router.message(Command("dice"))
async def roll_dice(message: types.Message):
    user_id = message.from_user.id
    balance = get_balance(user_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /dice")
    parts = message.text.split()

    if len(parts) < 3:
        await message.answer("<b>‚ùå–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</b>", parse_mode="HTML")
        return
    if not parts[1].isdigit() or int(parts[1]) < 1 or int(parts[1]) > 6:
        await message.answer("<b>‚ùå–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 6</b>", parse_mode="HTML")
        return
    
    if parts[2].lower() == 'all':
        bet = balance
    elif parts[2].isdigit():
        bet = int(parts[2])
    else:
        await message.answer("<b>‚ùå–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π –∏–ª–∏ all</b>", parse_mode="HTML")
        return
    
    if bet <= 0:
        await message.answer("<b>‚ùå–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è</b>", parse_mode="HTML")
        return
    if bet > balance:
        await message.answer("<b>‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>", parse_mode="HTML")
        return
    
    kef = 4
    logging.info(f"–î–µ–Ω—å–≥–∏ –Ω–∞ —Ä—É–∫–∞—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}  {balance}")
    dice_message = await message.answer_dice(emoji='üé≤')
    await asyncio.sleep(4)
    dice_result = dice_message.dice.value
    if dice_result == int(parts[1]):
        balance += bet * kef
        await message.answer(f"<b>‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏: {bet * kef}üí∏</b>", parse_mode="HTML")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∏–≥—Ä–∞–ª {bet * kef}")
    else:
        balance -= bet
        await message.answer(f"<b>‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª: {bet}üí∏</b>", parse_mode="HTML")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–∏–≥—Ä–∞–ª {bet}")
    update_balance(user_id, balance)


@router.message(Command("foot"))
async def send_dice_cmd(message: types.Message):
    user_id = message.from_user.id
    balance = get_balance(user_id)
    if len(message.text.split()) < 2:
        await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ all</b>", parse_mode="HTML")
        return
    betstr = message.text.split()[1].lower()
    if betstr == "all":
        bet = balance
    else:
        try:
            bet = int(betstr)
        except ValueError:
            await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ all</b>", parse_mode="HTML")
            return
    if bet <= 0:
        await message.answer("<b>‚ùå–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è</b>", parse_mode="HTML")
        return
    if bet > balance:
        await message.answer("<b>‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>", parse_mode="HTML")
        return
    dice_msg = await message.answer_dice(emoji="‚öΩ")
    dice_result = dice_msg.dice.value
    await asyncio.sleep(4)
    if dice_result in {3, 4, 5}:
        balance += int(bet * 1.5)
        await message.answer(f"<b>‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏: {int(bet * 1.5)}</b>", parse_mode="HTML")
    else:
        balance -= bet
        await message.answer(f"<b>‚ùå–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: {bet}</b>", parse_mode="HTML")
    update_balance(user_id, balance)