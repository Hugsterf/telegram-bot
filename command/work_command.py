from aiogram.filters import Command
from aiogram import Router, types
import logging
import random
import time

from .datebase import *
from .for_job import SALARY


router = Router()

@router.message(Command("collect"))
async def collect_command(message: types.Message):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /collect")
    last_work_time = get_last_collect_time(user_id)
    salary_hard_soft = get_salary_skills_user(user_id)
    current_time = time.time()
    time_diff = current_time - last_work_time
    cooldown = 3 * 60 * 60
    if time_diff < cooldown:
        remaining_time = int(cooldown - time_diff)
        minutes = remaining_time // 60
        await message.answer(f"<b>‚è≥–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.</b>", parse_mode="HTML")
        return
    salary = random.randint(
        (SALARY[get_job_type(user_id)]["salary_min"] + salary_hard_soft),
        (SALARY[get_job_type(user_id)]["salary_max"] + salary_hard_soft)
    )
    balance_on_bank = get_balance_on_bank(user_id)
    balance_on_bank += salary
    update_balance_on_bank(user_id, balance_on_bank)
    update_last_collect_time(user_id)
    await message.answer(f"‚úÖ<b>–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {salary}üí∞\nüè¶–í –±–∞–Ω–∫–µ: {balance_on_bank}</b>üí∞", parse_mode="HTML")


@router.message(Command("work"))
async def work_command(message: types.Message):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /work")
    last_work_time = get_last_work_time(user_id)
    current_time = time.time()
    time_diff = current_time - last_work_time
    cooldown = 20 * 60 
    if time_diff < cooldown:
        remaining_time = int(cooldown - time_diff)
        minutes = remaining_time // 60
        await message.answer(f"‚è≥<b>–í—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.</b>", parse_mode="HTML")
        return
    balance = get_balance(user_id)
    logging.info(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {balance}")
    work = random.randint(50, 100)
    balance += work
    update_balance(user_id, balance)
    update_last_work_time(user_id)
    await message.answer(f"<b>‚úÖ–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {work}üí∏</b>", parse_mode="HTML")


@router.message(Command("crime"))
async def crime_command(message: types.Message):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /crime")
    last_crime_time = get_last_crime_time(user_id) 
    current_time = time.time()
    time_diff = current_time - last_crime_time
    cooldown = 30 * 60
    if time_diff < cooldown:
        remaining_time = int(cooldown - time_diff)
        minutes = remaining_time // 60
        await message.answer(f"‚è≥<b>–í—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.</b>", parse_mode="HTML")
        return
    balance = get_balance(user_id)
    balance_on_bank = get_balance_on_bank(user_id)
    logging.info(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {balance}")
    if random.random() < 0.8:
        crime = random.randint(100, 200)
        balance += crime
        update_balance(user_id, balance)
        await message.answer(f"‚úÖ<b>–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {crime}üí∏</b>", parse_mode="HTML")
    else:
        crime = random.randint(100, 200)
        balance_on_bank -= crime
        update_balance_on_bank(user_id, balance_on_bank)
        await message.answer(f"üëÆ‚Äç‚ôÇÔ∏è<b>–í–∞—Å –ø–æ–π–º–∞–ª–∞ –ø–æ–ª–∏—Ü–∏—è! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏: {crime}üí∞</b>", parse_mode="HTML")
    update_last_crime_time(user_id)


@router.message(Command(commands=["riskywork", "rwork"]))
async def crime_command(message: types.Message):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /riskywork")
    last_riskwork_time = get_last_riskwork_time(user_id)
    current_time = time.time()
    time_diff = current_time - last_riskwork_time
    cooldown = 30 * 60
    if time_diff < cooldown:
        remaining_time = int(cooldown - time_diff)
        minutes = remaining_time // 60
        await message.answer(f"‚è≥<b>–í—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.</b>", parse_mode="HTML")
        return
    balance = get_balance(user_id) 
    balance_on_bank = get_balance_on_bank(user_id)
    logging.info(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {balance}")  
    if random.random() < 0.8:
        rwork = random.randint(100, 150)
        balance += rwork
        update_balance(user_id, balance) 
        await message.answer(f"<b>‚úÖ–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {rwork}üí∏</b>", parse_mode="HTML")
    else:
        rwork = random.randint(100, 200)
        balance_on_bank -= rwork
        update_balance_on_bank(user_id, balance_on_bank)  
        await message.answer(f"üèè<b>–í–∞—Å –∏–∑–±–∏–ª–∏ –∑–∞ –ø–ª–æ—Ö—É—é —Ä–∞–±–æ—Ç—É... —Å—á–µ—Ç –∑–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–æ–ª—å–Ω–∏—Ü–µ: {rwork}üí∞</b>.", parse_mode="HTML")
    update_last_riskwork_time(user_id)