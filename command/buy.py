from aiogram import Router, types
from aiogram.filters import Command
import logging

from .for_buy import BUY_SALARY, GET_SALARY
from .datebase import *

router = Router()

@router.message(Command(commands=["buy_hard", "buy_hard@buecash_bot"]))
async def buy_hard_skills(message: types.Message):
    user_id = message.from_user.id
    balance = get_balance(user_id)
    current_level = get_hard_level_user(user_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /buy_hard")
    if current_level >= 10:
        await message.answer("<b>‚ùå –í—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è Hard Skills!</b>", parse_mode="HTML")
        return
    try:
        hard_cost = BUY_SALARY[current_level]
    except KeyError:
        await message.answer("<b>‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞</b>", parse_mode="HTML")
        return
    if balance < hard_cost:
        await message.answer(f"<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {hard_cost}üí∏</b>", parse_mode="HTML")
        return
    new_level = current_level + 1
    salary_increase = GET_SALARY.get(new_level, 0)  
    update_balance(user_id, balance - hard_cost)
    update_hard_level_user(user_id, new_level)
    update_salary_skill_user(user_id, get_salary_skills_user(user_id) + salary_increase)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç {get_hard_level_user(user_id)} —É—Ä–æ–≤–µ–Ω—å Hard Skills")
    await message.answer(f"‚úÖ–í–∞—à –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å Hard Skills: {get_hard_level_user(user_id)}‚ùó", parse_mode="HTML")


@router.message(Command(commands=["buy_soft", "buy_soft@buecash_bot"]))
async def buy_soft_skills(message: types.Message):
    user_id = message.from_user.id
    balance = get_balance(user_id)
    current_level = get_soft_level_user(user_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /buy_soft")
    if current_level >= 10:
        await message.answer("<b>‚ùå –í—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è Soft Skills!</b>", parse_mode="HTML")
        return
    try:
        soft_cost = BUY_SALARY[current_level]
    except KeyError:
        await message.answer("<b>‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞</b>", parse_mode="HTML")
        return
    if balance < soft_cost:
        await message.answer(f"<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {soft_cost}üí∏</b>", parse_mode="HTML")
        return
    new_level = current_level + 1
    salary_increase = GET_SALARY.get(new_level, 0)  
    update_balance(user_id, balance - soft_cost)
    update_soft_level_user(user_id, new_level)
    update_salary_skill_user(user_id, get_salary_skills_user(user_id) + salary_increase)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç {get_soft_level_user(user_id)} —É—Ä–æ–≤–µ–Ω—å Hard Skills")
    await message.answer(f"‚úÖ–í–∞—à –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å Soft Skills: {get_soft_level_user(user_id)}‚ùó", parse_mode="HTML")


@router.message(Command("buy_menu"))
async def buy_command(message: types.Message):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /buy_menu")
    hard_level = get_hard_level_user(user_id)
    soft_level = get_soft_level_user(user_id)

    if hard_level < 1:
        hard_level = 1
        update_hard_level_user(user_id, hard_level)

    if soft_level < 1:
        soft_level = 1
        update_soft_level_user(user_id, soft_level)

    if hard_level >= 10:
        hard_cost = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!"
        hard_salary = GET_SALARY[10]
    else:
        hard_cost = f"{BUY_SALARY[hard_level]}üí∏"
        hard_salary = GET_SALARY[hard_level]

    if soft_level >= 10:
        soft_cost = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!"
        soft_salary = GET_SALARY[10]
    else:
        soft_cost = f"{BUY_SALARY[hard_level]}üí∏"
        soft_salary = GET_SALARY[hard_level]
    
    text = f"""
<b>1. üßÆ Hard Skills - –ø—Ä–æ–∫–∞—á–∞–π —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç –Ω–∞ —Ä–∞–±–æ—Ç–µ!</b>
<b><i>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è - {hard_cost}</i></b>
<b><i>–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫ –∑–∞—Ä–ø–ª–∞—Ç–µ - {hard_salary}üí∏</i></b>
<i>/buy_hard</i>

<b>2. ü§ù Soft Skills - –ø—Ä–æ–∫–∞—á–∞–π —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞!</b>
<b><i>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è - {soft_cost}</i></b>
<b><i>–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫ –∑–∞—Ä–ø–ª–∞—Ç–µ - {soft_salary}üí∏</i></b>
<i>/buy_soft</i>
"""
    await message.answer(text, parse_mode="HTML")