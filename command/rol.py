# import random
# from aiogram.filters import Command
# from aiogram.types import Message
# from aiogram import Router, Bot
# from typing import Dict, List, Set
# from aiogram.exceptions import TelegramRetryAfter
# import logging
# import asyncio
# from config import TOKEN
# from .datebase import get_balance, update_balance

# router = Router()
# bot = Bot(token=TOKEN)

# logging.basicConfig(
#     level=logging.INFO,
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
# )
# logger = logging.getLogger(__name__)

# RED_NUMBERS = {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
# BLACK_NUMBERS = {2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35}

# active_games: Dict[int, Dict] = {}
# user_bets: Dict[int, Dict[int, Dict]] = {}
# users_with_active_bets: Set[int] = set()
# last_messages: Dict[tuple, str] = {}

# async def safe_edit_message(chat_id: int, message_id: int, text: str, parse_mode="HTML"):
#     try:
#         if last_messages.get((chat_id, message_id)) == text:
#             return
#         await bot.edit_message_text(
#             chat_id=chat_id,
#             message_id=message_id,
#             text=text,
#             parse_mode=parse_mode
#         )
#         last_messages[(chat_id, message_id)] = text
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# def is_valid_bet(value: str) -> bool:
#     if value.isdigit():
#         num = int(value)
#         return 0 <= num <= 36
#     return value.lower() in {"red", "black"}

# def calculate_payout(value: str) -> int:
#     return 36 if value.isdigit() else 2

# def check_win(bet_value: str, winning_number: int) -> bool:
#     bet_value = bet_value.lower()
#     if bet_value.isdigit():
#         return int(bet_value) == winning_number
#     elif bet_value == "red":
#         return winning_number in RED_NUMBERS
#     elif bet_value == "black":
#         return winning_number in BLACK_NUMBERS
#     return False

# async def process_bet(user_id: int, amount: int) -> bool:
#     try:
#         balance = await get_balance(user_id)
#         if balance is None:
#             logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
#             return False
            
#         if amount > balance:
#             logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
#             return False
            
#         if not await update_balance(user_id, -amount):
#             logger.error("–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤")
#             return False
            
#         return True
#     except Exception as e:
#         logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
#         return False

# async def finish_roulette(chat_id: int):
#     if chat_id not in user_bets or not user_bets[chat_id]:
#         if chat_id in active_games:
#             try:
#                 await bot.delete_message(chat_id, active_games[chat_id]["message_id"])
#             except Exception as e:
#                 logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
#             del active_games[chat_id]
#         return

#     winning_number = random.randint(0, 36)
#     is_red = winning_number in RED_NUMBERS
#     winners = []
#     total_payout = 0

#     for user_id, bet in user_bets[chat_id].items():
#         try:
#             user = await bot.get_chat_member(chat_id, user_id)
#             username = f"@{user.user.username}" if user.user.username else f"ID {user.user.id}"
            
#             users_with_active_bets.discard(user_id)
            
#             if check_win(bet["value"], winning_number):
#                 payout = bet["amount"] * calculate_payout(bet["value"])
#                 if await update_balance(user_id, payout):
#                     winners.append(f"<b>üéâ {username}: +{payout} (—Å—Ç–∞–≤–∫–∞: {bet['amount']} –Ω–∞ {bet['value']})</b>")
#                     total_payout += payout
#                 else:
#                     logger.error("–û—à–∏–±–∫–∞ –≤—ã–ø–ª–∞—Ç—ã –≤—ã–∏–≥—Ä—ã—à–∞")
#                     await update_balance(user_id, bet["amount"])
#         except Exception as e:
#             logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏: {e}")
#             users_with_active_bets.discard(user_id)
#             await update_balance(user_id, bet["amount"])

#     result_text = (
#         f"üèÜ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏!</b>\n\n"
#         f"<b>üé≤ –í—ã–ø–∞–ª–æ: {winning_number}</b>\n"
#         f"<b>üî¥ –¶–≤–µ—Ç: {'–∫—Ä–∞—Å–Ω–æ–µ' if is_red else '—á—ë—Ä–Ω–æ–µ'}</b>\n\n"
#     )
    
#     if winners:
#         result_text += f"<b>üí∞ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ (–≤—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à: {total_payout}):</b>\n" + "\n".join(winners)
#     else:
#         result_text += "üò¢ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç</b>"

#     try:
#         await bot.send_message(chat_id, result_text, parse_mode="HTML")
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

#     if chat_id in active_games:
#         try:
#             await bot.delete_message(chat_id, active_games[chat_id]["message_id"])
#         except Exception as e:
#             logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
#         del active_games[chat_id]
#     if chat_id in user_bets:
#         del user_bets[chat_id]

# @router.message(Command(commands=["bet"]))
# async def bet_command(message: Message):
#     user_id = message.from_user.id
#     chat_id = message.chat.id
    
#     if user_id in users_with_active_bets:
#         await message.answer("<b>‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞!</b>", parse_mode="HTML")
#         return
    
#     try:
#         balance = await get_balance(user_id)
#         if balance is None:
#             await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>", parse_mode="HTML")
#             return
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
#         await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>", parse_mode="HTML")
#         return
    
#     if chat_id not in active_games:
#         await message.answer("<b>‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!</b>", parse_mode="HTML")
#         return
    
#     parts = message.text.split()
#     if len(parts) < 3:
#         await message.answer(
#             "<b>‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /bet [—á–∏—Å–ª–æ/—Ü–≤–µ—Ç] [—Å—É–º–º–∞]</b>\n"
#             "<b>–ü—Ä–∏–º–µ—Ä: /bet red 100</b>",
#             parse_mode="HTML"
#         )
#         return
    
#     bet_value = parts[1]
#     amount_str = parts[2].lower()
    
#     if not is_valid_bet(bet_value):
#         await message.answer("<b>‚ùå –î–æ–ø—É—Å—Ç–∏–º–æ: 0-36 –∏–ª–∏ red/black</b>", parse_mode="HTML")
#         return
    
#     try:
#         amount = balance if amount_str == 'all' else int(amount_str)
#         if amount <= 0:
#             await message.answer("<b>‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0</b>", parse_mode="HTML")
#             return
#         if amount > balance:
#             await message.answer("<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>", parse_mode="HTML")
#             return
#     except ValueError:
#         await message.answer("<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞</b>", parse_mode="HTML")
#         return
    
#     if not await process_bet(user_id, amount):
#         await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏</b>", parse_mode="HTML")
#         return
    
#     if chat_id not in user_bets:
#         user_bets[chat_id] = {}
#     user_bets[chat_id][user_id] = {"value": bet_value, "amount": amount}
#     users_with_active_bets.add(user_id)
    
#     await message.answer(
#         f"<b>‚úÖ –°—Ç–∞–≤–∫–∞ {amount} –Ω–∞ {bet_value} –ø—Ä–∏–Ω—è—Ç–∞!</b>\n"
#         f"<b>üí∞ –û—Å—Ç–∞—Ç–æ–∫: {balance - amount}</b>\n"
#         f"<b>üîÆ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {amount * calculate_payout(bet_value)}</b>",
#         parse_mode="HTML"
#     )

# @router.message(Command("roll"))
# async def start_roulette(message: Message):
#     chat_id = message.chat.id
    
#     if chat_id in active_games:
#         await message.answer("<b>‚ùå –†—É–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!</b>", parse_mode="HTML")
#         return
    
#     active_games[chat_id] = {"message_id": None, "timer": None}
#     user_bets[chat_id] = {}
    
#     msg = await message.answer(
#         "üé∞ <b>–†—É–ª–µ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
#         "<b>‚ö° –°—Ç–∞–≤–∫–∏: /bet [—á–∏—Å–ª–æ/—Ü–≤–µ—Ç] [—Å—É–º–º–∞]</b>\n"
#         "<b>‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: 30 —Å–µ–∫—É–Ω–¥</b>\n"
#         "<b>üìä –°—Ç–∞–≤–æ–∫: 0</b>\n"
#         "<b>‚ö†Ô∏è 1 —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞</b>",
#         parse_mode="HTML"
#     )
#     active_games[chat_id]["message_id"] = msg.message_id
    
#     async def countdown():
#         for counter in range(30, 0, -5):
#             bets_count = len(user_bets.get(chat_id, {}))
            
#             await safe_edit_message(
#                 chat_id,
#                 msg.message_id,
#                 f"üé∞ <b>–†—É–ª–µ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
#                 f"<b>‚ö° –°—Ç–∞–≤–∫–∏: /bet [—á–∏—Å–ª–æ/—Ü–≤–µ—Ç] [—Å—É–º–º–∞]</b>\n"
#                 f"<b>‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {counter} —Å–µ–∫—É–Ω–¥</b>\n"
#                 f"<b>üìä –°—Ç–∞–≤–æ–∫: {bets_count}</b>\n"
#                 f"<b>‚ö†Ô∏è 1 —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞</b>",
#                 parse_mode="HTML"
#             )
#             await asyncio.sleep(5)
        
#         await finish_roulette(chat_id)
    
#     active_games[chat_id]["timer"] = asyncio.create_task(countdown())

# @router.message(Command("help_roll"))
# async def help_command(message: Message):
#     help_text = (
#         "üé∞ <b>–ü–æ–º–æ—â—å –ø–æ —Ä—É–ª–µ—Ç–∫–µ</b>\n\n"
#         "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
#         "/roll - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É (30 —Å–µ–∫)\n"
#         "/bet [—á–∏—Å–ª–æ/—Ü–≤–µ—Ç] [—Å—É–º–º–∞] - —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É\n\n"
#         "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
#         "/bet red 100 - –Ω–∞ –∫—Ä–∞—Å–Ω–æ–µ\n"
#         "/bet 17 50 - –Ω–∞ —á–∏—Å–ª–æ 17\n\n"
#         "<b>–í—ã–ø–ª–∞—Ç—ã:</b>\n"
#         "–ß–∏—Å–ª–æ (0-36): x36\n"
#         "–¶–≤–µ—Ç (red/black): x2\n\n"
#         "<b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
#         "- 1 —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞ –∑–∞ –∏–≥—Ä—É\n"
#         "- –°—Ç–∞–≤–∫–∏ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å—Ä–∞–∑—É"
#     )
#     await message.answer(help_text, parse_mode="HTML")